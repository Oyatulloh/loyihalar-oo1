# АРГУМЕНТЫ ФУНКЦИИ
# В Python есть пазиционные и именованные аргументы либо аргументы с ключевимы словами (key words arguments)
# кроме этого количество аргументов в вызове функции играет роль, также можно соединять именованные аргументы 
# в словарь внутри функции


# Аргументы и параметры функции

def my_fn(a, b):
    a = a + 1
    c = a + b
    return c
result = my_fn(10+3)  #   TypeError: my_fn() missing 1 required positional argument: 'b' 
# В вызове функции отсутствует один объязательный аргуменит
print(result)

def my_fn(a, b):
    a = a + 1
    c = a + b
    return c
result = my_fn(10+3,5)
print(result)
# _____________________________________________________________________________________________________

# Ошибка черезмерного количества аргументов

def my_fn(a, b):
    c = a + b
    return c
print(my_fn(10, 3, 5)) # TypeError: my_fn() takes 2 positional arguments but 3 were given
#_______________________________________________________________________________________________________


# ОБЪЕДИНЕНИЕ ВСЕХ АРГУМЕНТОВ В КОРТЕЖ В ФУНКЦИИ
# Может ли функция принимать любое количество аргументов? Ответ да! Когда объединяем аргументы в кортеж (tuple)

def sum_nums(*arguments): # такую функцию можно вызовать с любым количеством аргументов. 
#    С помощи оператор '*' можно собирать разные аргументы в один кортеж  
    print(arguments) # (2, 3, 7) это кортеж
    print(type(arguments)) # кортеж это упорядочный последовательность элеметов, и их изменять нельзя
    print(arguments[0]) # 2
    return sum(arguments) # 'sum' встроенная функция Python возвращает результат суммирование всез элементов в кортежи 'arguments'. 
print(sum_nums(2, 3, 7)) # это пазиционные аргументы, и порядок следование таких аргументов важен

#_______________________________________________________________________________________________________


# Что такое позиционные аргументы?
def get_posts_info(name, posts_qty):
    info = f"{name}, wrote {posts_qty} posts"
    return info
# <<< это позиционные апргументы и порядрк аргументов важен
# и также важен количество аргументов которые мы передаем в функцию.
print(info)
#_______________________________________________________________________________________________________


# АРГУМЕНТЫ С КЛЮЧЕВЫМИ СЛОВАМИ (KEY WORDS ARGUMENTS)
def get_posts_info(name, posts_qty):
    info = f"{name}, wrote {posts_qty} posts"
    return info
info = get_posts_info(name='Bob', posts_qty=25) # это аргумент с ключевыми словами и порядок аргументов не важен
print(info) #<<< Bob, wrote 25 posts
# Использование аргументов с ключевыми словами делает код читабельным!!!
#_______________________________________________________________________________________________________


# ОБЪЕДИНЕНИЕ ИМЕНОВАНЫХ АРГУМЕНТОВ В СЛОВАРЬ (dict)
def get_posts_info(**person):
    print(person) # <<< {'name': 'Bob', 'posts_qty': 25}
    print(type(person)) # <<< <class 'dict'>
    info = ( #<<< это не кортеж
        f"{person ['name']} wrote"  # <<<',' если здесь не ставит запятую то Python автоматический объединит две строки
        f"{person ['posts_qty']} posts"
        # или можно написать
        # f"{person ['name']} wrote", f"{person ['posts_qty']} posts"
    ) # <<< это не кортеж. Между скобками написено два вырожения с формированние с помощи f""  строк.
    return info
info = get_posts_info(name='Bob', posts_qty=25)
#_______________________________________________________________________________________________________

# МОЖНО ЛИ В ФУНКЦИЮ ПЕРЕДОВАТЬ ПОЗИЦИОННЫЕ АРГУМЕНТЫ??? ОТВЕТ - ДА
def get_posts_info(**person):
    print(person)  # <<< {'posts_qty': 25, 'name': 'Bob'}
    info = f"{person['name']} wrote {person['posts_qty']} posts"
    return info
info = get_posts_info(posts_qty=25, name='Bob')
print(info) # <<< Bob wrote 25 posts
# В Python можно передовать как позиционные аргументы так же и аргументы с ключевыми словами, 
# позиционны аргумениы с помощи оператора ** можно объеденять в кортеж, 
# а именованные аргументы можно с помощи оператора ** в словарь  
#________________________________________________________________________________________________________



# Задача №1
# 1 Перепишите вызов функции merge_list_to_dict из предыдущей задачи так,
# чтобы в нем исрользовались аргументы с ключевыми словами
# 2 Добавьте еще один вызов функции, в котором будет один позиционный аргумент,
# а второй аргумент с ключевым словом

def merge_list_to_dict(list1, list2):
    return dict(zip(list1, list2))
res_one = merge_list_to_dict(list1=['a', 'b', 'c'], list2=[100, True, 'gpt'])
print(res_one) # {'a': 100, 'b': True, 'c': 'gpt'}
res_two = merge_list_to_dict(['a', 'b', 'c'], list2=[100, True, 'gpt'])
print(res_two) # {'a': 100, 'b': True, 'c': 'gpt'}
#________________________________________________________________________________________________________

# Задача №2
# 1 Создайте функцию update_car_info, в которой все именованные аргументы будут объединяться в словарь car 
# 2 Добавьте в словарь новый ключь is_available с значением True
# 3 Верните из функции изменённый словарь
# 4 Вызовите функцию с именованными аргументами brand и price 
# 5 Выводите в терминал результат функции

def update_car_info(**car):
    car['is_available'] = True # 2 Добавьте в словарь новый ключь is_available с значением True
    return car #  Верните из функции изменённый словарь
print(update_car_info(brand='BMW', price=100000)) # 4 Вызовите функцию с именованными аргументами brand и price 
 # 5 Выводите в терминал результат функции {'brand': 'BMW', 'price': 100000, 'is_available': True}